version: "3.5"

services:

  s3:
    container_name: ${COMPOSE_PROJECT_NAME}-${ENVIRONMENT}-minio
    image: minio/minio:RELEASE.2021-11-24T23-19-33Z
    restart: unless-stopped
    ports:
      - "9000:9000" # port to interact with minio
      - "9001:9001" # port to login to minio dashboard
    networks:
      - frontend
      - backend
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_ACCESS_KEY}
    # Allow all incoming hosts to access the server by using 0.0.0.0
    command: server --console-address ':9001' --address ':9000' /data
    volumes:
      - ./minio_data:/data

  create_buckets:
    image: minio/mc:RELEASE.2019-07-17T22-13-42Z
    depends_on:
      - s3
    networks:
      - backend
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://s3:${MINIO_PORT} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_ACCESS_KEY} --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep challenge`" ]] || /usr/bin/mc mb s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc policy download s3/${MLFLOW_BUCKET_NAME};
      exit 0;
      '

  postgresql:
    container_name: ${COMPOSE_PROJECT_NAME}-${ENVIRONMENT}-postgresql
    restart: always
    image: postgres:11
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - backend
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
    volumes:
      - db_data:/var/lib/postgresql/data/

  waitfordb:
    image: dadarek/wait-for-dependencies
    depends_on:
      - postgresql
    
  mlflow-server:
    container_name: ${COMPOSE_PROJECT_NAME}-${ENVIRONMENT}-mlflow-server
    build:
      context: ./
      dockerfile: ./build/mlflow/Dockerfile
    networks:
      - backend
    ports:
      - "$MLFLOW_PORT:5000"
    environment:
      DB_URI: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:${POSTGRES_PORT}/${POSTGRES_DATABASE}
      AWS_ACCESS_KEY_ID: "${MINIO_ACCESS_KEY}"
      AWS_SECRET_ACCESS_KEY: "${MINIO_SECRET_ACCESS_KEY}"
      MLFLOW_S3_ENDPOINT_URL: "http://s3:${MINIO_PORT}"
    restart: always
    depends_on:
        - waitfordb
    entrypoint: ./start.sh

  train:
    container_name: ${COMPOSE_PROJECT_NAME}-${ENVIRONMENT}-train
    build:
      context: ./
      dockerfile: ./build/train/Dockerfile
    networks:
      - backend
    depends_on:
      - mlflow-server
      - postgresql
    restart: "no"
    volumes:
      - ./0_Data:/src/0_Data
    command: >
      bash -c "tail -f /dev/null"
    environment:
      # DOCKER_NAME: ${COMPOSE_PROJECT_NAME}-${ENVIRONMENT}-train
      # ENVIRONMENT: ${ENVIRONMENT}
      PROJECT_PATH: "/src"
      TZ: "Europe/Vienna"
      PYTHONUNBUFFERED: 1
      # MODEL_DIR: ./2_Trained_Models
      OPENBLAS_NUM_THREADS: 1
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_ACCESS_KEY}
      MLFLOW_S3_ENDPOINT_URL: http://s3:${MINIO_PORT}
  
  api_batch:
    container_name: ${COMPOSE_PROJECT_NAME}-${ENVIRONMENT}-api_batch
    build:
      context: ./
      dockerfile: ./build/serve_batch/Dockerfile
    networks:
      - backend
    restart: "always"
    expose:
      - "5001"
    ports:
      - 5001:5001
    volumes:
      - ./0_Data:/src/0_Data
    environment:
      DOCKER_NAME: ${COMPOSE_PROJECT_NAME}-api_batch
      ENVIRONMENT: ${ENVIRONMENT}
      PROJECT_PATH: "/src"
      
  cron:
    image: mcuadros/ofelia:latest
    networks:
      - backend
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /usr/share/zoneinfo/:/usr/share/zoneinfo/
      - ./config/cron/config.ini:/etc/ofelia/config.ini
    environment:
      TZ: "Europe/Vienna"
      DOCKER_NAME: ${COMPOSE_PROJECT_NAME}-${ENVIRONMENT}-cron

  nginx:
    container_name: ${COMPOSE_PROJECT_NAME}-${ENVIRONMENT}-nginx
    build:
      context: ./
      dockerfile: ./build/nginx/Dockerfile
    networks:
      - backend
    expose:
      - "8080"
    ports:
      - "80:8080"
    depends_on:
      - api_batch

networks:
  backend:
  frontend:

volumes:
  certs:
  db_data:
  minio_data:
